package com_facture;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;

import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ResourceBundle;

import com_connection.ConnectionDB;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Label;

import javafx.scene.control.TextArea;

import javafx.scene.input.MouseEvent;
import projet.bin.Article;
import projet.bin.Client;
import projet.bin.Commande;
import projet.bin.Facture;
import javafx.scene.control.TableView;

import javafx.scene.control.DatePicker;

import javafx.scene.control.TableColumn;

public class FactureController implements Initializable {
	@FXML
	private TableView<Commande> tabcom;
	@FXML
	private TableColumn<Commande , Integer> idcommcol;
	@FXML
	private TableColumn<Commande , Integer>  idcliencol;
	@FXML
	private TableColumn<Commande , Integer>  idarticlcl;
	@FXML
	private TableColumn<Commande , Integer> datecl;
	@FXML
	private TableColumn<Commande , Integer>  Nomcl;
	@FXML
	private TableColumn<Commande , Integer>  prenomcl;
	@FXML
	private TableColumn<Commande , Integer>  telcl;
	@FXML
	private TableColumn<Commande , Integer>  referencecl;
	@FXML
	private TableColumn<Commande , Integer>  prixcl;
	@FXML
	private TableColumn<Commande , Integer>  quantitecl;
	@FXML
	private TableColumn<Commande , Integer>  detailcl;
	@FXML
	private TextField rechercher;
	@FXML
	private Label exit;
	@FXML
	private TextField RechArt;
	@FXML
	private TableView<Facture> tabfac;
	@FXML
	private TableColumn<Facture , Integer> idfaccl1;
	@FXML
	private TableColumn<Facture , Integer> idcommcl1;
	@FXML
	private TableColumn<Facture , Integer> idvendcl1;
	@FXML
	private TableColumn<Facture , String> datecl1;
	@FXML
	private TableColumn<Facture , String> Nomcl1;
	@FXML
	private TableColumn<Facture , String> prenomcl1;
	@FXML
	private TableColumn<Facture , Integer> telcl1;
	@FXML
	private TableColumn<Facture , Integer> referencecl1;
	@FXML
	private TableColumn <Facture , Integer>prixcl1;
	@FXML
	private TableColumn<Facture , Integer> quantitecl1;
	@FXML
	private TableColumn<Facture , String> methcl1;
	@FXML
	private TableColumn<Facture , Integer> tvacl1;
	@FXML
	private TableColumn<Facture , Integer> montantcl1;
	public ObservableList<Commande> dataCom = FXCollections.observableArrayList();
	public ObservableList<Facture> datafac = FXCollections.observableArrayList();
	@FXML
	private TextField idfactxt;
	@FXML
	private TextField idcommtxt;
	@FXML
	private TextField idvendtxt;
	@FXML
	private TextField nomtxt;
	@FXML
	private TextField prenomtxt;
	@FXML
	private TextField teltxt;
	@FXML
	private TextArea details;
	@FXML
	private TextField referencetxt;
	@FXML
	private Label prixtxt;
	@FXML
	private DatePicker datetxt;
	@FXML
	private TextArea quantitetxt;
	@FXML
	private TextArea methtxt;
	@FXML
	private TextArea tvatxt;
	@FXML
	private TextArea montanttxt;
	
	
	
	public void viewComm() {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `commande`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		tabcom.getItems().removeAll(dataCom);
    		while (rs.next())
    		{
    			dataCom.add(new Commande(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6) ,  rs.getString(7) ,  rs.getString(8) ,  rs.getString(9) ,  rs.getInt(11) ,   rs.getString(10) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		idcommcol.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("id"));
    	idcliencol.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("nom"));
    	datecl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("datecom"));
    	Nomcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("nomcli"));
    	prenomcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("prenomcli"));
    	telcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("telcli"));
    	detailcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("details"));
    	telcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("idarticle"));
    	referencecl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("refarticle"));
    	prixcl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("prix"));
    	quantitecl.setCellValueFactory(new PropertyValueFactory<Commande, Integer>("quantite"));
    	
    	tabcom.setItems(dataCom);	
	}
    

	
	public void viewFac() {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `facture`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		tabfac.getItems().removeAll(datafac);
    		while (rs.next())
    		{
    			datafac.add(new Facture(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6) ,  rs.getString(7) ,  rs.getString(8) ,  rs.getString(9) ,  rs.getString(10) ,   rs.getString(11) ,  rs.getString(12)  ,   rs.getString(13) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		
    	
    	
    	
    	idfaccl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("id"));
    	idcommcl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("idcom"));
    	idvendcl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("idvend"));
    	Nomcl1.setCellValueFactory(new PropertyValueFactory<Facture, String>("nomcli"));
    	prenomcl1.setCellValueFactory(new PropertyValueFactory<Facture, String>("prenomcli"));
    	datecl1.setCellValueFactory(new PropertyValueFactory<Facture, String>("datefact"));
    	telcl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("tel"));
    	referencecl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("ref"));
    	prixcl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("prix"));
    	quantitecl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("quantite"));
    	methcl1.setCellValueFactory(new PropertyValueFactory<Facture, String>("methpai"));
    	tvacl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("tva"));
    	montantcl1.setCellValueFactory(new PropertyValueFactory<Facture, Integer>("montant"));
    	
    	tabfac.setItems(datafac);	
    	
    	
    	
    	
    	
    	
	}
	
	 private void TableToTextCom() {
			tabcom.setOnMouseClicked(new EventHandler<MouseEvent>() {

				@Override
				public void handle(MouseEvent event) {
					// TODO Auto-generated method stub
					Commande c =tabcom.getItems().get(tabcom.getSelectionModel().getSelectedIndex());
					idcommtxt.setText(c.getId());
					nomtxt.setText(c.getNomcli());
					prenomtxt.setText(c.getPrenomcli());
					teltxt.setText(c.getTelcli());
					referencetxt.setText(c.getRefarticle());
					prixtxt.setText(c.getPrix());
					String QUTT = Integer.toString(c.getQuantite());
					quantitetxt.setText(QUTT);
					//oooooooooooonnnnnnnSssssssssssssssss
					
				
				}
				
				
			});
		}
	
	
	
	
	
	
	
	// Event Listener on Label[#exit].onMouseClicked
	@FXML
	public void handleButtonAction(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on FontAwesomeIcon.onDragDetected
	@FXML
	public void back(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on FontAwesomeIcon.onMouseClicked
	@FXML
	public void back(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onAction
	@FXML
	public void ajouter(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onAction
	@FXML
	public void modifier(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onAction
	@FXML
	public void delete(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on FontAwesomeIcon.onMouseClicked
	@FXML
	public void vider(MouseEvent event) {
		// TODO Autogenerated
	}
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
		
		
	}
}
