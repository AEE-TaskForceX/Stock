package com_commande;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import com_article.ArticleController;
import com_client.ClientController;
import com_connection.ConnectionDB;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;

import javafx.scene.control.TextArea;

import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import projet.bin.Article;

import projet.bin.Client;
import projet.bin.Commande;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class CommandeController implements Initializable{
	@FXML
	private TextField idclient;
	@FXML
	private TextField nomclient;
	@FXML
	private TextField prenomclient;
	@FXML
	private TextField telephoneclient;
	@FXML
	private TextField idarticle;
	@FXML
	private TextField refarticle;
	@FXML
	private TextField prixarticle;
	@FXML
	private TextArea details;
	@FXML
	private TableView <Commande>tabcom;
	@FXML
	private TableColumn <Commande,String>idcomm;
	@FXML
	private TableColumn <Commande,String>idclien;
	@FXML
	private TableColumn <Commande,String>idarticl;
	@FXML
	private TableColumn <Commande,String>date;
	@FXML
	private TableColumn <Commande,String>Nom;
	@FXML
	private TableColumn <Commande,String>prenom;
	@FXML
	private TableColumn <Commande,String>tel;
	@FXML
	private TableColumn <Commande,String>reference;
	@FXML
	private TableColumn <Commande,String>prix;
	@FXML
	private TableColumn <Commande,String>detail;
	@FXML
	private TextField rechercher;
	@FXML
	private Label exit;
	@FXML
	private TableView <Client>tabcli;
	@FXML
	private TableColumn <Client,String>idcli;
	@FXML
	private TableColumn <Client,String>nomcli;
	@FXML
	private TableColumn <Client,String>prencli;
	@FXML
	private TableColumn <Client,String>adrcli;
	@FXML
	private TableColumn <Client,String>telcli;
	@FXML
	private TableColumn <Client,String>email;
	@FXML
	private TableView <Article>tabart;
	@FXML
	private TableColumn <Article,String>idart;
	@FXML
	private TableColumn <Article,String>catart;
	@FXML
	private TableColumn <Article,String>qutt;
	@FXML
	private TableColumn <Article,String>pri;
	@FXML
	private TableColumn <Article,String>ref;
	@FXML
	private TableColumn <Article,String>desc;
	@FXML
	private TextField rechCli;
	@FXML
	private TextField RechArt;
	public ObservableList<Client> dataCli = FXCollections.observableArrayList();
	public ObservableList<Commande> dataCom = FXCollections.observableArrayList();
	public ObservableList<Article> dataArt = FXCollections.observableArrayList();
	// Event Listener on FontAwesomeIcon.onMouseClicked

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		viewCli();
		viewCom();
		viewArt();
		TableToTextCli();
		TableToTextArt();
		searchCli();
		searchCom();
		searchArt();
	}
	public void viewCli() {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `client`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		
    		while (rs.next())
    		{
    			dataCli.add(new Client(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		idcli.setCellValueFactory(new PropertyValueFactory<Client, String>("id_client"));
    	nomcli.setCellValueFactory(new PropertyValueFactory<Client, String>("nom"));
    	prencli.setCellValueFactory(new PropertyValueFactory<Client, String>("prenom"));
    	adrcli.setCellValueFactory(new PropertyValueFactory<Client, String>("adresse"));
    	telcli.setCellValueFactory(new PropertyValueFactory<Client, String>("telephone"));
    	email.setCellValueFactory(new PropertyValueFactory<Client, String>("email"));
    	
    	tabcli.setItems(dataCli);	
	}
    
	
	public void viewArt() {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `article`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		
    		while (rs.next())
    		{
    			dataArt.add(new Article(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6), rs.getString(7) ,  rs.getString(8) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		idart.setCellValueFactory(new PropertyValueFactory<Article, String>("id"));
    	catart.setCellValueFactory(new PropertyValueFactory<Article, String>("nomcat"));
    	qutt.setCellValueFactory(new PropertyValueFactory<Article, String>("quantite"));
    	pri.setCellValueFactory(new PropertyValueFactory<Article, String>("prix"));
    	ref.setCellValueFactory(new PropertyValueFactory<Article, String>("ref"));
    	desc.setCellValueFactory(new PropertyValueFactory<Article, String>("desc"));
    	
    	tabart.setItems(dataArt);	
    	
	}
	
	public void viewCom() {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `commande`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		
    		while (rs.next())
    		{
    			dataCom.add(new Commande(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6), rs.getString(7) ,  rs.getString(8), rs.getString(9) ,  rs.getString(10) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		idcomm.setCellValueFactory(new PropertyValueFactory<Commande, String>("id"));
    	idclien.setCellValueFactory(new PropertyValueFactory<Commande, String>("nomcat"));
    	idarticl.setCellValueFactory(new PropertyValueFactory<Commande, String>("quantite"));
    	date.setCellValueFactory(new PropertyValueFactory<Commande, String>("prix"));
    	Nom.setCellValueFactory(new PropertyValueFactory<Commande, String>("ref"));
    	prenom.setCellValueFactory(new PropertyValueFactory<Commande, String>("desc"));
    	tel.setCellValueFactory(new PropertyValueFactory<Commande, String>("quantite"));
    	reference.setCellValueFactory(new PropertyValueFactory<Commande, String>("prix"));
    	prix.setCellValueFactory(new PropertyValueFactory<Commande, String>("ref"));
    	detail.setCellValueFactory(new PropertyValueFactory<Commande, String>("desc"));
    	
    	tabcom.setItems(dataCom);	
    	
	}
	
	@FXML
	public void back(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent homePage = FXMLLoader.load(getClass().getResource("/vendeur/Vendeur.fxml"));
	    Scene homepageScene = new Scene(homePage);
	    Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    appStage.setScene(homepageScene);
	    homepageScene.setFill(Color.TRANSPARENT);
	    appStage.show();
	}
	@FXML
    private void handleButtonAction(MouseEvent event) {
       
            System.exit(0);
        }
	 public void vider ( )
	    {
	    	try {
	    		
	    		idclient.clear();
	    		nomclient.clear();
	    		prenomclient.clear();
	    		telephoneclient.clear();
	    		idarticle.clear();
	    		refarticle.clear();
	    		prixarticle.clear();
	    		details.clear();

			} catch (Exception e) {
				// TODO: handle exception
				System.out.println(e.getMessage());
			}
	    	
	    	
	    	
	    }
	  private void TableToTextCli() {
			tabcli.setOnMouseClicked(new EventHandler<MouseEvent>() {

				@Override
				public void handle(MouseEvent event) {
					// TODO Auto-generated method stub
					Client l =tabcli.getItems().get(tabcli.getSelectionModel().getSelectedIndex());
					idclient.setText(l.getId_client());
					nomclient.setText(l.getNom());
					prenomclient.setText(l.getPrenom());
					telephoneclient.setText(l.getTelephone());
					
				
				}
				
				
			});
		}
	  private void TableToTextArt() {
			tabart.setOnMouseClicked(new EventHandler<MouseEvent>() {

				@Override
				public void handle(MouseEvent event) {
					// TODO Auto-generated method stub
					Article l =tabart.getItems().get(tabart.getSelectionModel().getSelectedIndex());
					idarticle.setText(l.getId());
					refarticle.setText(l.getNomcat());
					prixarticle.setText(l.getPrix());
				
					
				
				}
				
				
			});
		}
	  private void loadDataDBCli() {
			dataCli.clear();
			try {
				Connection conn = ConnectionDB.conDB();
				PreparedStatement pst=conn.prepareStatement("Select * from client");
				ResultSet rs=pst.executeQuery();
				while(rs.next()) {
					dataCli.add(new Client(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)));
				}
			}
			catch(SQLException ex){
				Logger.getLogger(ClientController.class.getName()).log(Level.SEVERE, null,ex);
			}
			tabcli.setItems(dataCli);
		}
		    
		private void searchCli() {
			rechCli.setOnKeyReleased(e->{
				if(rechCli.getText().equals("")) {
					loadDataDBCli();
				}
				else {
					dataCli.clear();
					String sql= "Select * from client where id_client LIKE '%"+rechCli.getText()+"%' " + "UNION Select * from client where nom LIKE '%"+rechCli.getText()+"%' "+ "UNION Select * from client where prenom LIKE '%"+rechCli.getText()+"%' "+ "UNION Select * from client where adresse LIKE '%"+rechCli.getText()+"%' "+ "UNION Select * from client where email LIKE '%"+rechCli.getText()+"%' ";
					try {
						Connection conn = ConnectionDB.conDB();
						PreparedStatement pst=conn.prepareStatement(sql);
						ResultSet rs=pst.executeQuery();
						while(rs.next()) {
							dataCli.add(new Client(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)));
						}
						tabcli.setItems(dataCli);
					}catch(SQLException ex) {
						Logger.getLogger(ClientController.class.getName()).log(Level.SEVERE, null,ex);
					}
				}
						
			}
			);
		}
		
		private void loadDataDBArt() {
			dataCli.clear();
			try {
				Connection conn = ConnectionDB.conDB();
				PreparedStatement pst=conn.prepareStatement("Select * from article");
				ResultSet rs=pst.executeQuery();
				while(rs.next()) {
					dataArt.add(new Article(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8)));
				}
			}
			catch(SQLException ex){
				Logger.getLogger(ArticleController.class.getName()).log(Level.SEVERE, null,ex);
			}
			tabart.setItems(dataArt);
		}
		    
		private void searchArt() {
			RechArt.setOnKeyReleased(e->{
				if(RechArt.getText().equals("")) {
					loadDataDBArt();
				}
				else {
					dataArt.clear();
					String sql= "Select * from article where Id_Article LIKE '%"+RechArt.getText()+"%' " + "UNION Select * from article where Nom_Cat LIKE '%"+RechArt.getText()+"%' "+ "UNION Select * from aticle where Nom_Fournisseur LIKE '%"+RechArt.getText()+"%' "+ "UNION Select * from article where Reference LIKE '%"+RechArt.getText()+"%' "+ "UNION Select * from article where Description\r\n" + 
							" LIKE '%"+RechArt.getText()+"%' ";
					try {
						Connection conn = ConnectionDB.conDB();
						PreparedStatement pst=conn.prepareStatement(sql);
						ResultSet rs=pst.executeQuery();
						while(rs.next()) {
							dataArt.add(new Article(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8)));
						}
						tabart.setItems(dataArt);
					}catch(SQLException ex) {
						Logger.getLogger(ArticleController.class.getName()).log(Level.SEVERE, null,ex);
					}
				}
						
			}
			);
		}
		private void loadDataDBCom() {
			dataCom.clear();
			try {
				Connection conn = ConnectionDB.conDB();
				PreparedStatement pst=conn.prepareStatement("Select * from commande");
				ResultSet rs=pst.executeQuery();
				while(rs.next()) {
					dataCom.add(new Commande(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10)));
				}
			}
			catch(SQLException ex){
				Logger.getLogger(CommandeController.class.getName()).log(Level.SEVERE, null,ex);
			}
			tabcom.setItems(dataCom);
		}
		    
		private void searchCom() {
			rechercher.setOnKeyReleased(e->{
				if(rechercher.getText().equals("")) {
					loadDataDBCom();
				}
				else {
					dataCom.clear();
					String sql= "Select * from commande where id_commande LIKE '%"+rechercher.getText()+"%' " + "UNION Select * from commande where id_client LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from commande where Id_Article LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from commande where Nom_Client LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from commande where Prenom_Client LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from commande where Ref_Article LIKE '%"+rechercher.getText()+"%' ";
					try {
						Connection conn = ConnectionDB.conDB();
						PreparedStatement pst=conn.prepareStatement(sql);
						ResultSet rs=pst.executeQuery();
						while(rs.next()) {
							dataCom.add(new Commande(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10)));
						}
						tabcom.setItems(dataCom);
					}catch(SQLException ex) {
						Logger.getLogger(CommandeController.class.getName()).log(Level.SEVERE, null,ex);
					}
				}
						
			}
			);
		}
}
