package com_categorie;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;

import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ResourceBundle;

import com_connection.ConnectionDB;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.input.MouseEvent;
import projet.bin.Categorie;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class CategorieController  implements Initializable{
	@FXML
	private TextField searchfield;
	@FXML
	private TextField chargefield;
	@FXML
	private TextField typefield;
	@FXML
	private Button BackBtn;
	@FXML
	private TableView<Categorie> table;
	@FXML
	private TableColumn<Categorie, String> col_cat;
	@FXML
	private TableColumn<Categorie, String> col_desc;
	public ObservableList<Categorie> data= FXCollections.observableArrayList();
	 ObservableList<Categorie> dataList;
	
	@FXML
	public void Modifier(ActionEvent event) {
		// TODO Autogenerated
		Connection con= ConnectionDB.conDB();
    	PreparedStatement st = null;
    	Categorie a = new Categorie();
    	
    	String nom = typefield.getText() ; 
    	String desc = chargefield.getText();
    	a.setNom(nom);
    	a.setDesc(desc);
    	String rqt ="UPDATE categorie SET nom_cat=?, description = ?  WHERE nom_cat=?";
    	try {
			st = con.prepareStatement(rqt);
			
			st.setString(1, a.getNom());
			st.setString(2, a.getDesc());
			st.setString(3,i);
			st.executeUpdate();
			con.close();
			Alert alert = new Alert(AlertType.INFORMATION);
			alert.setTitle("C'est fait");
			alert.setHeaderText(null);
			alert.setContentText("La catégorie est Modifiée");
			alert.showAndWait();		
    		UpdateTable();

			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("ERREUR");
		alert.setHeaderText(null);
			alert.setContentText("La catégorie n'a pas été modifiée");
			alert.showAndWait();
		}
	}
	
	@FXML
	public void Ajouter(ActionEvent event) {
		// TODO Autogenerated
				Connection con= ConnectionDB.conDB();
		    	PreparedStatement st = null;
		    	Categorie a = new Categorie();
		    	
		    	String nom = typefield.getText() ; 
		    	String desc = chargefield.getText();
		    	a.setNom(nom);
		    	a.setDesc(desc);
		    	String rqt ="Insert into categorie ( Nom_Cat, Description)  values(?,?) ";
		    	try {
					st = con.prepareStatement(rqt);
					
					st.setString(1, a.getNom());
					st.setString(2, a.getDesc());
					
					st.executeUpdate();
					con.close();
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("C'est fait");
					alert.setHeaderText(null);
					alert.setContentText("La catégorie est ajoutée");
					alert.showAndWait();	
		    		UpdateTable();

					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					Alert alert = new Alert(AlertType.WARNING);
					alert.setTitle("ERREUR");
				alert.setHeaderText(null);
					alert.setContentText("la catégorie n'a pas été ajoutée");
					alert.showAndWait();
				}
		    }
		
		
		
		
	
	@FXML
	public void Retour(ActionEvent event) {
		// TODO Autogenerated
	}
	  //index for selection and i to get id
    String i;
    int index=-1;
    @FXML
    void getSelected (MouseEvent event) {
    	index=table.getSelectionModel().getSelectedIndex();
    	if (index<=-1) {
    	
    		return;
    	}
    	i=col_cat.getCellData(index).toString();
    	typefield.setText(col_cat.getCellData(index).toString());
    	chargefield.setText(col_desc.getCellData(index).toString());
    	
    }
    
    
    public void UpdateTable(){
    	
    	col_cat.setCellValueFactory(new PropertyValueFactory<Categorie, String>("nom"));
		col_desc.setCellValueFactory(new PropertyValueFactory<Categorie, String>("desc"));
		
		Connection con= ConnectionDB.conDB();
        table.setItems(data);
        
    }
    
    
    
    
	@FXML
	public void Supprimer(ActionEvent event) {
		// TODO Autogenerated
		
		
		Connection con= ConnectionDB.conDB();
    	PreparedStatement st = null;
    	String rqt ="delete from categorie where com_cat=?";
    	try {
    		st = con.prepareStatement(rqt);
    		st.setString(1, i);
    		st.executeUpdate();
    		Alert alert = new Alert(AlertType.INFORMATION);
			alert.setTitle("C'est fait");
			alert.setHeaderText(null);
			alert.setContentText("Catégorie Supprimée");
			alert.showAndWait();
    		System.out.println("i="+i);
    		UpdateTable();
    	
    		}
    	catch(Exception e) {
    		Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("ERREUR");
			alert.setHeaderText(null);
			alert.setContentText("ERREUR! cette catégorie concerne un ou de plusieurs articles");
			alert.showAndWait();
    	}
		
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		UpdateTable();
		//search();
		
	}
	 @FXML
	    void search() {          
	    	col_cat.setCellValueFactory(new PropertyValueFactory<Categorie, String>("nom"));
			col_desc.setCellValueFactory(new PropertyValueFactory<Categorie, String>("desc"));
			
	        
			Connection con= ConnectionDB.conDB();
	        table.setItems(dataList);
	        FilteredList<Categorie> filteredData = new FilteredList<>(dataList, b -> true);  
	        searchfield.textProperty().addListener((observable, oldValue, newValue) -> {
	        	filteredData.setPredicate(Categorie -> {
	    if (newValue == null || newValue.isEmpty()) {
	     return true;
	    }    
	    String lowerCaseFilter = newValue.toLowerCase();
	    
	    if (Categorie.getNom().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
	    	return true; // recherche par type
	   
	    }                       
	     else  
	          	return false; // n'exits pas
	   });
	  });  
	  SortedList<Categorie> sortedData = new SortedList<>(filteredData);  
	  sortedData.comparatorProperty().bind(table.comparatorProperty());  
	  table.setItems(sortedData);      
	    }
	
	

}
