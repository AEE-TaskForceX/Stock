package com_fournisseur;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import com_connection.ConnectionDB;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import projet.bin.Fournisseur;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class FournisseurController implements Initializable {
	@FXML
	private TextField nomtxt;
	@FXML
	private TextField txtadresse;
	@FXML
	private TextField txttel;
	@FXML
	private TextField txtemail;
	@FXML
	private Label exit;
	@FXML
	private TableView <Fournisseur> table;
	@FXML
	private TableColumn <Fournisseur, String>idcolumn;
	@FXML
	private TableColumn <Fournisseur, String>nomcolumn;
	@FXML
	private TableColumn <Fournisseur, String>adressecolumn;
	@FXML
	private TableColumn <Fournisseur, String>emailcolumn;
	@FXML
	private TableColumn <Fournisseur, String>telcolumn;
	@FXML
	private TextField rechercher;
	public ObservableList<Fournisseur> data = FXCollections.observableArrayList();

/*--------------------------------------------------AJOUTER----------------------------------------------------------------------------------*/	    

	
    public static int Ajouter(Fournisseur cl)
    {
    	Connection conn = ConnectionDB.conDB();
    	int rs = 0;
    	try {
    		
    		String sql = "insert into fournisseur(Nom_Fournisseur , Adresse_Fournisseur , Tel_Fournisseur , Mail_Fournisseur ) values(?,?,?,?)";
    		PreparedStatement stm = conn.prepareStatement(sql);
    		
    		stm.setString(1, cl.getNom());
    		stm.setString(2, cl.getAdresse());
    		stm.setString(3, cl.getTel());
    		stm.setString(4, cl.getMail());
    		
    		
    		
    		
    		 rs = stm.executeUpdate();
    		
    		
			
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    return rs;	
    }
    
    
    
    public void insertdata (ActionEvent event)
    {
    	String NOM = nomtxt.getText();
    	String ADDRESSE = txtadresse.getText();
    	String TELE = txttel.getText();
    	String EMAIL = txtemail.getText();
    	
    	
    	Fournisseur cl = new Fournisseur();
    	
    	
    	cl.setNom(NOM);
    	cl.setAdresse(ADDRESSE);
    	cl.setTel(TELE);
    	cl.setMail(EMAIL);
    	
    	
    	
    	int etat = Ajouter(cl);
    	
    	
    	if (etat > 0) {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("Ajouter Fournisseur");
    	alert.setHeaderText("Information");
    	alert.setContentText("Fournisseur bien ajouté");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("Ajouter Fournisseur");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Fournisseur Non ajouté");
	    	alert.showAndWait();	
    
    	}
    	
    	
    	viewAbonnee();
    	
    	}
	
	
/*--------------------------------------------------AFFICHER----------------------------------------------------------------------------------*/	    
    
    
    public void viewAbonnee() {
		// TODO Autogenerated

		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `fournisseur`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		
    		while (rs.next())
    		{
    			data.add(new Fournisseur(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
	
    	nomcolumn.setCellValueFactory(new PropertyValueFactory<Fournisseur, String>("nom"));
    	adressecolumn.setCellValueFactory(new PropertyValueFactory<Fournisseur, String>("adresse"));
    	telcolumn.setCellValueFactory(new PropertyValueFactory<Fournisseur, String>("tel"));
    	emailcolumn.setCellValueFactory(new PropertyValueFactory<Fournisseur, String>("mail"));

    	table.setItems(data);	
	}
    
	
	
/*--------------------------------------------------MODIFIER----------------------------------------------------------------------------------*/	    
    
    public static int modifier(Fournisseur cl,String idd)
	{
		Connection conn = ConnectionDB.conDB();
    	int d = 0;
    	try {
    		
    		String sql = "update fournisseur set  Nom_Fournisseur = ? , Adresse_Fournisseur= ?  , Tel_Fournisseur = ? , Mail_Fournisseur = ?  where Nom_Fournisseur = ?  ";
    		PreparedStatement stm = conn.prepareStatement(sql);
    		
    		stm.setString(1, cl.getNom());
    		stm.setString(2, cl.getAdresse());
    		stm.setString(3, cl.getTel());
    		stm.setString(4, cl.getMail());
    		stm.setString(5, idd);
    		
    		
    		 d = stm.executeUpdate();
    		
    		
			
		} catch (SQLException e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    return d;	
		
		
		
	}
	
    
    public void update (ActionEvent event) 
	{
    	String NOM = nomtxt.getText();
    	String ADDRESSE = txtadresse.getText();
    	String TELE = txttel.getText();
    	String EMAIL = txtemail.getText();
    	
    	
    	Fournisseur cl = new Fournisseur();
    	
    	
    	cl.setNom(NOM);
    	cl.setAdresse(ADDRESSE);
    	cl.setTel(TELE);
    	cl.setMail(EMAIL);
    	
    	
    	
    	
    	 Fournisseur selected =table.getSelectionModel().getSelectedItem();
	        String idd = selected.getNom();
    	int etat = modifier(cl,idd);
    	
    	
    	if (etat > 0) {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("Modifier Fournisseur");
    	alert.setHeaderText("Information");
    	alert.setContentText("Fournisseur bien Modifié");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("Modifier Fournisseur");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Fournisseur Non Modifié");
	    	alert.showAndWait();	
    
    	}
    	
    	viewAbonnee();
    	
	}
    
    
 /*--------------------------------------------------SUPPRIMER----------------------------------------------------------------------------------*/	    
    
    
    public static int supp(String id)
	{
		Connection conn = ConnectionDB.conDB();
		int d = 0;
		
		
		try {
			
			String sql = "delete from fournisseur where Nom_Fournisseur = ? ";
			PreparedStatement stm = conn.prepareStatement(sql);
			stm.setString(1, id);
			d = stm.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			
			System.out.println(e.getMessage());
		}
		
		
		
		return d;
	
		
	}
    
    
    public void delete (ActionEvent event)
	{
    	Fournisseur selected =table.getSelectionModel().getSelectedItem();
        String idd = selected.getNom();
        table.getItems().removeAll(selected);
		int etat = supp(idd);
		
		if(etat > 0) 
        {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("Supprimer Fournisseur");
    	alert.setHeaderText("Information");
    	alert.setContentText("Fournisseur bien Supprimé");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("Supprimer Fournisseur");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Fournisseur Non Supprimé");
	    	alert.showAndWait();	
    
    	}
		
		
	}
    
    
    
   

    
/*--------------------------------------------------Vider les champs----------------------------------------------------------------------------------*/	 	    	    
    
    
    public void vider ( )
    {
    	try {
    		
	    	nomtxt.clear();
	    	txtadresse.clear();
	    	txttel.clear();
	    	txtemail.clear();
	    	
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    	
    	
    }

/*------------------------------------------------Table TO TEXTFIELD-------------------------------------------------------------------------------*/
    private void TableToText() {
		table.setOnMouseClicked(new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent event) {
				// TODO Auto-generated method stub
				Fournisseur l =table.getItems().get(table.getSelectionModel().getSelectedIndex());
			//	id.setText(l.getId());
				nomtxt.setText(l.getNom());
				txtadresse.setText(l.getAdresse());
				txttel.setText(l.getTel());
				txtemail.setText(l.getMail());
			
			}
			
			
		});
	}
@Override
public void initialize(URL location, ResourceBundle resources) {
	// TODO Auto-generated method stub
	TableToText();
	search();
	viewAbonnee();
}
    
@FXML
public void back(MouseEvent event) throws IOException {
	// TODO Autogenerated
	Parent homePage = FXMLLoader.load(getClass().getResource("/vendeur/Vendeur.fxml"));
    Scene homepageScene = new Scene(homePage);
    Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
    appStage.setScene(homepageScene);
    appStage.show();
}
    	
	
    
private void loadDataDB() {
	data.clear();
	try {
		Connection conn = ConnectionDB.conDB();
		PreparedStatement pst=conn.prepareStatement("Select * from fournisseur");
		ResultSet rs=pst.executeQuery();
		while(rs.next()) {
			data.add(new Fournisseur(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)));
		}
	}
	catch(SQLException ex){
		Logger.getLogger(FournisseurController.class.getName()).log(Level.SEVERE, null,ex);
	}
	table.setItems(data);
}
    
private void search() {
	rechercher.setOnKeyReleased(e->{
		if(rechercher.getText().equals("")) {
			loadDataDB();
		}
		else {
			data.clear();
			String sql= "Select * from fournisseur where Nom_Fournisseur LIKE '%"+rechercher.getText()+"%' " + "UNION Select * from fournisseur where Adresse_Fournisseur LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from fournisseur where Tel_Fournisseur LIKE '%"+rechercher.getText()+"%' "+ "UNION Select * from fournisseur where Mail_Fournisseur LIKE '%"+rechercher.getText()+"%' ";
			try {
				Connection conn = ConnectionDB.conDB();
				PreparedStatement pst=conn.prepareStatement(sql);
				ResultSet rs=pst.executeQuery();
				while(rs.next()) {
					data.add(new Fournisseur(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)));
				}
				table.setItems(data);
			}catch(SQLException ex) {
				Logger.getLogger(FournisseurController.class.getName()).log(Level.SEVERE, null,ex);
			}
		}
				
	}
	);
}
	
}
